#!/usr/bin/python
import os
import re
import argparse
import logging
import shutil
from fnmatch import fnmatch
from jinja2 import FileSystemLoader, Environment, meta


l = logging.getLogger(name='mktemplate')
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(levelname)-7s | %(asctime)-23s | %(message)s'))
l.addHandler(handler)
l.setLevel(logging.WARNING)

OPTIONAL_ARGS_REXP = re.compile(r'^--*([A-Za-z0-9_-]+)')


def get_file_offsets(path):
    file_paths = []
    join = os.path.join
    extend = file_paths.extend
    path_len = len(path)
    for root, dirs, files in os.walk(path):
        root_offset = root[path_len:]
        extend([join(root_offset, i).lstrip('/') for i in files])
    return file_paths


def parse_unknown_kwargs(args):
    """Take in a list of the remainder args from argparse and tries to shove
    them into a new parser. Args can be of the form ['--arg-name', 'argval'] or
    '--arg-name=argval'. All args are forced to be strings"""
    unknown_parser = argparse.ArgumentParser()
    add_argument = unknown_parser.add_argument
    for i in args:
        match = re.match(OPTIONAL_ARGS_REXP, i)
        if match is None:
            continue

        add_argument(match[0])

    return unknown_parser.parse_args(args)


class MkTemplateTemplate:
    TEMPLATES = set()

    def __init__(self, name, template_directory, files=None, dependencies=None):
        self.name = name
        self.template_directory = template_directory
        self.directory_path = os.path.join(self.template_directory, self.name)
        self.files = [] if files is None else files
        self.dependencies = [] if dependencies is None else dependencies
        self.template_variables = []
        self.__class__.TEMPLATES.add(self)

    def create_template(self):
        os.makedirs(self.directory_path, exist_ok=True)
        ignore_path = os.path.join(self.directory_path, '.ignore')
        dependencies_path = os.path.join(self.directory_path, '.dependencies')
        with open(ignore_path, 'a+') as f:
            f.close()

        with open(dependencies_path, 'a+') as f:
            f.close()

    def resolve_files(self):
        ignore_path = os.path.join(self.directory_path, '.ignore')
        ignored_files = ['.ignore', '.dependencies', '.git/*']
        if os.path.isfile(ignore_path) is True:
            l.debug('Reading .ignore file for %s', self.directory_path)
            with open(ignore_path, 'r') as f:
                ignored_files.extend(f.read().splitlines())
        else:
            l.warning('Path %s is missing .ignore file', self.directory_path)

        for file in get_file_offsets(self.directory_path):
            if not any(fnmatch(file, pat) for pat in ignored_files):
                self.files.append(file)

    def resolve_dependencies(self):
        dependencies_path = os.path.join(self.directory_path, '.dependencies')
        l.debug('Reading .dependencies file for %s', self.directory_path)
        dependencies = []
        if os.path.isfile(dependencies_path) is True:
            with open(dependencies_path, 'r') as f:
                dependencies = f.read().splitlines()
        else:
            l.warning('Path %s is missing .dependencies file', self.directory_path)
        listdir = os.listdir(self.template_directory)
        dependency_objects = [i for i in self.TEMPLATES if i.name in dependencies]
        existing_deps = []
        for i in dependency_objects:
            if i.name in listdir:
                existing_deps.append(i)
            else:
                l.warning('Missing dependency: %s', i.name)
        self.dependencies.extend(existing_deps)

    def template_to(self, target_dir, *args, force=False, **kwargs):
        # TODO: Support dependency templating
        join = os.path.join
        # add check to make sure that we aren't overwriting files
        files_to_use = self.files
        jinja_files = set()
        files_to_copy = set()
        for i in files_to_use:
            if fnmatch(i, '*.j2') is True:
                jinja_files.add(i)
            else:
                files_to_copy.add(i)

        template_loader = FileSystemLoader(searchpath=self.directory_path)
        template_env = Environment(loader=template_loader)

        for file in jinja_files:
            st = os.stat(join(self.directory_path, file))
            target_path = join(target_dir, file[:-3])
            template = template_env.get_template(file)
            rendered_template = template.render(**kwargs)
            if os.path.isfile(target_path) is True and force is False:
                l.warning('Path %s already exists, not copying', target_path)
                continue
            with open(target_path, 'w') as f:
                f.write(rendered_template)
            os.chmod(target_path, st.st_mode)

        copy = shutil.copy
        makedirs = os.makedirs

        for file in files_to_copy:
            source = join(self.directory_path, file)
            dest = join(target_dir, file)
            if os.path.isfile(dest) is True and force is False:
                continue
            check_dir = os.path.split(dest)[0]
            makedirs(check_dir, exist_ok=True)
            copy(source, dest)

    def resolve_template_variables(self):
        files_to_use = self.files
        jinja_files = set()
        for i in files_to_use:
            if fnmatch(i, '*.j2') is True:
                jinja_files.add(i)

        template_env = Environment()
        join = os.path.join
        for file in jinja_files:
            full_path = join(self.directory_path, file)
            with open(full_path, 'r') as f:
                template_source = f.read()

            parsed_content = template_env.parse(template_source)
            variables = meta.find_undeclared_variables(parsed_content)
            variables_string = ', '.join(variables)
            self.template_variables.append((file, variables_string))

    # def __del__(self):
    #     self.__class__.TEMPLATES.remove(self)
    #     super().__del__()

    def __repr__(self):
        rep = '\n'.join(
                  ['Name: %s',
                   'Path: %s',
                   'Deps: %s',
                   'Files: %s',
                   'File-Variable-map: \n%s']
                   ) + '\n'
        file_variable_map = '\n'.join('%s: %s' % (f, v) for f, v in self.template_variables)
        return rep % (self.name,
                      self.directory_path,
                      ', '.join(i.name for i in self.dependencies),
                      ', '.join(i for i in self.files),
                      file_variable_map)


def install_template(src, dst, force=False):
    """Essentially a copytree operation from source to dest. Both should include
    the name of the new template's directory regardless of whether that directory
    already exists in the dest"""
    files_to_copy = get_file_offsets(src)
    copy = shutil.copy
    makedirs = os.makedirs
    join = os.path.join
    makedirs(dst, exist_ok=True)

    for path in files_to_copy:
        source = join(src, path)
        dest = join(dst, path)
        if os.path.isfile(dest) is True and force is False:
            continue
        # make directories if they don't exist. this lets us use
        # file offsets
        check_dir = os.path.split(dest)[0]
        makedirs(check_dir, exist_ok=True)
        copy(source, dest)


def get_templates(template_directory, ignore_dependencies=False):
    """Make MKTemplateTemplate objects from directory structure"""
    template_dirs = os.listdir(template_directory)
    templates = [MkTemplateTemplate(name, template_directory) for name in template_dirs]
    for t in templates:
        t.resolve_files()

    for t in templates:
        t.resolve_dependencies()

    for t in templates:
        t.resolve_template_variables()

    return templates


def main(args):
    which = args.which
    template_directory = args.template_directory
    target_directory = args.target_directory
    templates = get_templates(template_directory, args.ignore_dependencies)
    join = os.path.join
    force = args.force

    if which == 'list':
        for t in templates:
            print(t)
    elif which == 'copy':
        templates_to_copy = [i for i in templates if i.name in args.template]
        kwarg_namespace = parse_unknown_kwargs(args.args)
        kwargs = vars(kwarg_namespace)
        for t in templates_to_copy:
            t.template_to(target_directory, force=force, **kwargs)
    elif which == 'create':
        new_templates = [MkTemplateTemplate(name, template_directory) for name in args.template]
        for t in new_templates:
            t.create_template()
    elif which == 'install':
        for name in args.template:
            src = join(target_directory, name)
            dst = join(template_directory, name)
            l.debug('Installing %s from %s to %s', name, target_directory, template_directory)
            install_template(src, dst, force=force)


if __name__ == '__main__':
    description = """A general use templating script. Utilizes the Jinja2 templating
    module to quickly copy files from one place to another while filling in
    user supplied variables.

    By default templates are stored in ~/.config/mktemplate_templates/"""

    example_usage = """Examples:
        mktemplate -o ./someone_elses_templates/ install pretty_template1 pretty_template2
        mktemplate copy pwn --binary-path binary --remote-host=abc.xyz
        mktemplate create newtemplate
        mktemplate list
        mktemplate -t ./someone_elses_templates/ list"""

    parser = argparse.ArgumentParser(description=description,
                                     epilog=example_usage,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(required=True, dest='which')
    copy_arg_message = """Any additional args provided will be treated as variables
    to be used in Jinja2 templating. All provided flags MUST use optional flags
    E.g. --optional-flag"""
    copy_parser = subparsers.add_parser('copy',
                                        help='Copy templates to your target directory. Files with the same name as existing files in the target directory will be ignored unless the --force flag is used. ' + copy_arg_message)

    copy_parser.add_argument('template', help='Template name to look for/copy from', nargs="+", type=str)
    copy_parser.add_argument('args', nargs=argparse.REMAINDER,
                             help=copy_arg_message)

    list_parser = subparsers.add_parser('list', help='List files for template, do not copy')

    create_parser = subparsers.add_parser('create',
                        help='Create a new template in the template directory No effect if template already exists')

    create_parser.add_argument('template', help='Template name to create', nargs='+', type=str)

    install_parser = subparsers.add_parser('install',
                        help='Install an existing template to the template directory')
    install_parser.add_argument('template',
                                help='Template name to copy from the target directory',
                                nargs='+', type=str)

    parser.add_argument('-t', '--template-directory',
                        default=os.path.expanduser('~/.config/mktemplate_templates'),
                        help='Directory to look for template files in')

    parser.add_argument('-o', '--target-directory',
                        default=os.getcwd(),
                        help='Directory to output files in.')

    parser.add_argument('-i', '--ignore-dependencies',
                        help="Don't include any other dependencies marked in the .dependencies file",
                        default=False, action='store_true')

    parser.add_argument('-f', '--force', action='store_true',
                        help='Overwrite files of the same name if they exist in the output directory',
                        default=False)

    args = parser.parse_args()

    main(args)
